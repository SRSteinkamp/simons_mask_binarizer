# AUTOGENERATED! DO NOT EDIT! File to edit: 00_mask_transform.ipynb (unless otherwise specified).

__all__ = ['binarize_mask', 'data_loader', 'data_saver', 'outpath_from_inpath', 'check_outpath', 'create_outpath',
           'savingpath', 'mask_transform']

# Cell
import os
import numpy as np
import nibabel as nb
from nilearn import image, tests
from fastcore import test
import argparse

# Cell
def binarize_mask(input_image):
    transform_formula = '((i == 255) * 1).astype(np.uint8)'
    out_image = image.math_img(transform_formula, i=input_image)
    return out_image

# Cell
def data_loader(inpath):
    return nb.load(inpath)

# Cell
def data_saver(nifti, outpath):
    try:
        nb.save(nifti, outpath)
        return True
    except:
        return False

# Cell
def outpath_from_inpath(inpath):
    image_dir = os.path.dirname(inpath)
    return image_dir

# Cell
def check_outpath(outpath):
    if os.path.isdir(outpath):
        return True
    else:
        raise Exception('outpath has to be a directory!')

# Cell
def create_outpath(imagename, outpath, prefix):
    if check_outpath(outpath):
        if prefix is not None:
            return os.path.join(outpath, prefix + imagename)
        else:
            return os.path.join(outpath, imagename)

# Cell
def savingpath(inpath, outpath=None, prefix='bin_'):
    imagename = os.path.basename(inpath)

    if outpath is None:
        outpath = outpath_from_inpath(inpath)

    save_path = create_outpath(imagename, outpath, prefix)

    return save_path

# Cell
def mask_transform(inpath, outpath=None, prefix='bin_'):
    nifti = data_loader(inpath)
    savepath = savingpath(inpath, outpath, prefix)
    nifti_bin = binarize_mask(nifti)
    saving = data_saver(nifti_bin, savepath)

    if saving:
        print("Saved image!")
        return 1
    else:
        print("Not saved!")
        return 0