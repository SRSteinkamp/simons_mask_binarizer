# AUTOGENERATED! DO NOT EDIT! File to edit: 00_mask_transform.ipynb (unless otherwise specified).

__all__ = ['binarize_mask', 'data_loader', 'data_saver', 'outpath_from_inpath', 'check_outpath', 'create_outpath',
           'savingpath', 'mask_transform', 'nifti_binarizer']

# Cell
import os
import numpy as np
import nibabel as nb
from nilearn import image, tests
from fastcore import test
import argparse

# Cell
def binarize_mask(input_image):
    '''
    Main function for creating nifti image.

    Takes a nifti image, binarizes it and transforms to uint8 and outputs a new image.
    '''
    transform_formula = '((i > 0) * 1).astype(np.uint8)'
    out_image = image.math_img(transform_formula, i=input_image)
    return out_image

# Cell
def data_loader(inpath):
    '''
    Loads a nifti image at `inpath` using nibabel.
    '''
    return nb.load(inpath)

# Cell
def data_saver(nifti, outpath):
    '''
    Tries to save nifti using nibabel, if fails returns False.
    '''
    try:
        nb.save(nifti, outpath)
        return True
    except:
        return False

# Cell
def outpath_from_inpath(inpath):
    '''
    Returns the directories name.
    '''
    image_dir = os.path.dirname(inpath)
    return image_dir

# Cell
def check_outpath(outpath):
    if os.path.isdir(outpath):
        return True
    else:
        raise Exception('outpath has to be a directory!')

# Cell
def create_outpath(imagename, outpath, prefix):
    if check_outpath(outpath):
        if prefix is not None:
            return os.path.join(outpath, prefix + imagename)
        else:
            return os.path.join(outpath, imagename)

# Cell
def savingpath(inpath, outpath=None, prefix='bin_'):
    imagename = os.path.basename(inpath)

    if outpath is None:
        outpath = outpath_from_inpath(inpath)

    save_path = create_outpath(imagename, outpath, prefix)

    return save_path

# Cell
def mask_transform(inpath, outpath=None, prefix='bin_'):
    nifti = data_loader(inpath)
    savepath = savingpath(inpath, outpath, prefix)
    nifti_bin = binarize_mask(nifti)
    saving = data_saver(nifti_bin, savepath)

    if saving:
        print("Saved image!")
        return 1
    else:
        print("Not saved!")
        return 0

# Cell
def nifti_binarizer():
    parser = argparse.ArgumentParser(description='Binarize a nifti-mask from 255 to 1.',
                                     epilog='Operation complete!')

    parser.add_argument(dest='inpath', type=str,
                    help='The input image.')

    parser.add_argument('-o', '--outpath', type=str,
                         help='The output filename and path', default='')

    parser.add_argument('-p', '--prefix', type=str,
                         help='The prefix to the filename',
                         default='bin_')


    args = parser.parse_args()

    if args.outpath == '':
        args.outpath = None

    if mask_transform(args.inpath, args.outpath, args.prefix):
        print("Succes!!")
    else:
        print("Fail! Maybe check paths.")
